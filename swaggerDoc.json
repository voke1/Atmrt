{
  "swagger": "2.0",
  "info": {
    "description": "Automart\n Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "version": "1",
    "title": "Auto-Mart",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "vokeolomu@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/",
  "tags": [
    {
      "name": "Order",
      "description": "Access to Automart orders"
    },
    {
      "name": "User",
      "description": "Operations on Automart User"
    },
    {
      "name": "Flag",
      "description": "flag/report a posted AD as fraudulent."
    },
    {
      "name": "Car",
      "description": "Operations on Automart Car Ads"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/api/v1/car": {
      "post": {
        "tags": [
          "Car"
        ],
        "summary": "Create a car sale Ad",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Required fields",
            "schema": {
              "properties": {
                "email": {
                  "type": "string",
                  "example": "JohnDoe@email.com"
                },
                "price": {
                  "type": "integer",
                  "example": "230,000.00"
                },
                "manufacturer": {
                  "type": "string",
                  "example": "Benz"
                },
                "model": {
                  "type": "string",
                  "example": "M-234"
                },
                "body_type": {
                  "type": "string",
                  "enum": [
                    "car",
                    "truck",
                    "trailer",
                    "van"
                  ],
                  "example": "car"
                },
                "status": {
                  "type": "string",
                  "description": "whether car is sold or available",
                  "enum": [
                    "available",
                    "sold"
                  ],
                  "example": "sold"
                },
                "state": {
                  "type": "string",
                  "description": "whether car is used or new",
                  "enum": [
                    "new",
                    "used"
                  ],
                  "example": "new"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "View all Car Ads whether sold or unsold",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CarArray"
            }
          },
          "404": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/car/:carId/status": {
      "patch": {
        "tags": [
          "Car"
        ],
        "summary": "Mark a posted car Ad as sold",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "carId",
            "type": "string",
            "description": "Mark Car Ad as sold",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "operation successful",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "Invalid Input"
          },
          "404": {
            "description": "Car not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/car/:carId/price": {
      "patch": {
        "tags": [
          "Car"
        ],
        "summary": "Update the price of car",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "carId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "id of car Ad to update price",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Required",
            "description": "required field",
            "schema": {
              "properties": {
                "price": {
                  "type": "integer",
                  "description": "new price of Car Ad",
                  "example": 2000000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/car/:carId": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "View a specific car ",
        "description": "Multiple status values can be provided with comma separated strings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "id of specific Car Ad",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Car"
        ],
        "summary": "Delete a specific Car Ad ",
        "description": "Signed in user can delete a specific Car Ad",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "type": "integer",
            "description": "Id of a specific Car for Deletion",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Car Ad successfully deleted"
          },
          "404": {
            "description": "No car found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/flag": {
      "post": {
        "tags": [
          "Flag"
        ],
        "summary": "Report or Flag a Car Ad as fraudulent",
        "description": "post reasons and description of Car Ad as fraudulent",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "flag",
            "description": "description",
            "schema": {
              "properties": {
                "car_id": {
                  "type": "integer",
                  "description": "Car ID"
                },
                "reason": {
                  "type": "string",
                  "description": "reason for report"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Flag"
            }
          },
          "400": {
            "description": "Invalid"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a purchase order",
        "description": "Returns a map of status codes to quantities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Required fields",
            "description": "Required field",
            "schema": {
              "type": "object",
              "required": [
                "userName"
              ],
              "properties": {
                "car_id": {
                  "type": "integer"
                },
                "price_offered": {
                  "type": "integer"
                },
                "buyer": {
                  "type": "string"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/order/:orderId/price": {
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Update the price of a purchase order",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "type": "string",
            "name": "car_id"
          },
          {
            "in": "body",
            "name": "Required fields",
            "description": "Required field",
            "schema": {
              "type": "object",
              "properties": {
                "new_price_offered": {
                  "type": "integer",
                  "example": 12000000
                },
                "buyer": {
                  "type": "string",
                  "example": "John Doe"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "buyer": {
                  "type": "string",
                  "description": "user id",
                  "example": "John Doe"
                },
                "car_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Car ID"
                },
                "price": {
                  "type": "integer",
                  "description": "price offered",
                  "example": "500,000.00"
                },
                "new_price_offered": {
                  "type": "integer",
                  "description": "price offered",
                  "example": "500,000.00"
                },
                "old_price_offered": {
                  "type": "integer",
                  "description": "price offered",
                  "example": "500,000.00"
                },
                "created_on": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "enum": [
                    "pending",
                    "accepted",
                    "rejected"
                  ],
                  "example": "pending"
                }
              }
            }
          },
          "406": {
            "description": "Invalid Order"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates user account",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "signup",
            "schema": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "example": "John"
                },
                "last_name": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@company.com"
                },
                "password": {
                  "type": "string"
                },
                "address": {
                  "type": "string",
                  "description": "Address of Automart User"
                },
                "is_admin": {
                  "type": true,
                  "description": "confirms if user is an Admin"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid"
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "signup",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@company.com"
                },
                "password": {
                  "type": "string",
                  "example": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "token",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "buyer": {
          "type": "string",
          "description": "user id",
          "example": "John Doe"
        },
        "car_id": {
          "type": "integer",
          "format": "int64",
          "description": "Car ID"
        },
        "price": {
          "type": "integer",
          "description": "price offered",
          "example": "500,000.00"
        },
        "price_offered": {
          "type": "integer",
          "description": "price offered",
          "example": "500,000.00"
        },
        "created_on": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "pending",
            "accepted",
            "rejected"
          ],
          "example": "pending"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "johndoe@company.com"
        },
        "password": {
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Address of Automart User"
        },
        "is_admin": {
          "type": true,
          "description": "confirms if user is an Admin"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "CarArray": {
      "type": "array",
      "items": {
        "properties": {
          "car": {
            "$ref": "#/definitions/Car"
          },
          "car2": {
            "$ref": "#/definitions/Car"
          }
        }
      }
    },
    "Car": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "owner": {
          "type": "string",
          "example": "user id"
        },
        "price": {
          "type": "integer",
          "example": "230,000.00"
        },
        "manufacturer": {
          "type": "string",
          "example": "Benz"
        },
        "model": {
          "type": "string",
          "example": "M-234"
        },
        "body_type": {
          "type": "string",
          "enum": [
            "car",
            "truck",
            "trailer",
            "van"
          ],
          "example": "car"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "whether car is sold or available",
          "enum": [
            "available",
            "sold"
          ],
          "example": "sold"
        },
        "state": {
          "type": "string",
          "description": "whether car is used or new",
          "enum": [
            "new",
            "used"
          ],
          "example": "new"
        }
      }
    },
    "Flag": {
      "items": {
        "type": "object"
      },
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "car_id": {
          "type": "integer",
          "description": "Car ID"
        },
        "reason": {
          "type": "string",
          "description": "reason for report"
        },
        "created on": {
          "type": "integer",
          "description": "report date"
        },
        "description": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Flag"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more on Automart site",
    "url": "https://voke1.github.io/Automart"
  }
}